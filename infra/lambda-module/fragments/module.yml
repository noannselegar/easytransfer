AWSTemplateFormatVersion: "2010-09-09"
Description: A module for basic Lambda Function with Execution Role
Parameters:
  FunctionName:
    Description: Name for the function
    Type: String
  Description: 
    Type: String
    Default: N/A
  PackageType:
    Description: Zip or Image.
    Type: String
  ImageURI:
    Description: Container image URI in ECR.
    Type: String
    Default: ''
  Runtime:
    Description: AWS compatible runtime for the function.
    Type: String
    Default: python3.12
  Handler:
    Description: Handler function (<file>.<main-function>).
    Type: String
    Default: app.handler 
  MemorySize:
    Description: Memory available to the function in increments of 1MB.
    Type: Number
    Default: 128
Conditions:
  IsImageRuntime: !Equals [!Ref PackageType, "Image"]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName 
      Description: !Ref Description
      MemorySize: !Ref MemorySize
      Handler: 
        'Fn::If':
          - IsImageRuntime 
          - !Ref "AWS::NoValue"
          - !Ref Handler
      Runtime:
        'Fn::If':
          - IsImageRuntime
          - !Ref "AWS::NoValue"
          - !Ref Runtime
      Role: !GetAtt Role.Arn
      Code:
        'Fn::If':
          - IsImageRuntime 
          - ImageUri: !Ref ImageURI
          # Too lazy to come up with logic for the inline code.
          - ZipFile: |
              def handler(event, context):
                return {
                    "statusCode": 200,
                    "body": f"Hello from {event['rawPath']}!"
                }
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Lambda}
      RetentionInDays: 30

Outputs:
  RoleArn:
    Value: !GetAtt Role.Arn
